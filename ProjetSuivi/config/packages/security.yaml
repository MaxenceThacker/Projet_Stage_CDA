security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: emailUser
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\AppAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                target: app_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
    role_hierarchy:
         ROLE_ALTERNANT: ROLE_USER
         ROLE_TUTEUR: ROLE_USER
         ROLE_RESPONSABLE_LEGAL: ROLE_USER
         ROLE_FORMATEUR: ROLE_USER
         ROLE_ADMIN: ROLE_ADMIN
         ROLE_FORMATEURADMIN: [ROLE_ADMIN, ROLE_FORMATEUR]
         ROLE_TUTEURADMIN: [ROLE_ADMIN, ROLE_TUTEUR]

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         # require ROLE_ADMIN for /admin
         - { path: ^/admin, roles: ROLE_ADMIN }
         # require ROLE_TUTEUR for /tuteur
         - { path: ^/tuteur, roles: ROLE_TUTEUR }
         # require ROLE_RESPONSABLE_LEGAL for /responsable
         - { path: ^/responsable, roles: ROLE_RESPONSABLE_LEGAL }
         # require ROLE_FORMATEUR for /formateur
         - { path: ^/formateur, roles: ROLE_FORMATEUR }
         # require ROLE_ALTERNANT for /alternant
         - { path: ^/alternant, roles: ROLE_ALTERNANT }
         # require IS_AUTHENTICATED_ANONYMOUSLY for /login
         - { path: '^/login$', roles: IS_AUTHENTICATED_ANONYMOUSLY }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
